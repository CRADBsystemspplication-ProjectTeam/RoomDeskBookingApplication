// <auto-generated />
using System;
using ConferenceRoomAndDeskBookingApplication.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ConferenceRoomAndDeskBookingApplication.Migrations
{
    [DbContext(typeof(RoomDeskBookingDbContext))]
    [Migration("20251017064422_IntialOne")]
    partial class IntialOne
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ConferenceRoomAndDeskBookingApplication.Models.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingId"));

                    b.Property<DateTime?>("ActualCheckInTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ActualCheckOutTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("CancellationReason")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("CheckInReminderSent")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<bool>("EntryReminderSent")
                        .HasColumnType("bit");

                    b.Property<bool>("ExitReminderSent")
                        .HasColumnType("bit");

                    b.Property<string>("MeetingName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("OverdueReminderSent")
                        .HasColumnType("bit");

                    b.Property<string>("Purpose")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("ResourceId")
                        .HasColumnType("int");

                    b.Property<int>("ResourceType")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("BookingId");

                    b.HasIndex("Date");

                    b.HasIndex("Status");

                    b.HasIndex("UserId");

                    b.HasIndex("ResourceId", "Date", "Status");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("ConferenceRoomAndDeskBookingApplication.Models.BookingCheckIn", b =>
                {
                    b.Property<int>("CheckInId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CheckInId"));

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CheckInTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("CheckOutTime")
                        .HasColumnType("datetime2");

                    b.HasKey("CheckInId");

                    b.HasIndex("BookingId")
                        .IsUnique();

                    b.ToTable("BookingCheckIns");
                });

            modelBuilder.Entity("ConferenceRoomAndDeskBookingApplication.Models.BroadcastNotification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("NotificationSubject")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("NotificationType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int?>("UserType")
                        .HasColumnType("int");

                    b.HasKey("NotificationId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("LocationId");

                    b.HasIndex("Status");

                    b.ToTable("BroadcastNotifications");
                });

            modelBuilder.Entity("ConferenceRoomAndDeskBookingApplication.Models.Building", b =>
                {
                    b.Property<int>("BuildingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BuildingId"));

                    b.Property<string>("BuildingName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("NoOfFloors")
                        .HasColumnType("int");

                    b.HasKey("BuildingId");

                    b.HasIndex("LocationId");

                    b.ToTable("Buildings");
                });

            modelBuilder.Entity("ConferenceRoomAndDeskBookingApplication.Models.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.HasKey("DepartmentId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("ConferenceRoomAndDeskBookingApplication.Models.Desk", b =>
                {
                    b.Property<int>("DeskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeskId"));

                    b.Property<byte[]>("DeskImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("DeskName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("ResourceId")
                        .HasColumnType("int");

                    b.HasKey("DeskId");

                    b.HasIndex("ResourceId")
                        .IsUnique();

                    b.ToTable("Desks");
                });

            modelBuilder.Entity("ConferenceRoomAndDeskBookingApplication.Models.Event", b =>
                {
                    b.Property<int>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EventId"));

                    b.Property<int?>("BuildingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<byte[]>("EventImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("EventTitle")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("FloorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("EventId");

                    b.HasIndex("BuildingId");

                    b.HasIndex("Date");

                    b.HasIndex("FloorId");

                    b.HasIndex("LocationId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("ConferenceRoomAndDeskBookingApplication.Models.Floor", b =>
                {
                    b.Property<int>("FloorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FloorId"));

                    b.Property<int>("BuildingId")
                        .HasColumnType("int");

                    b.Property<string>("FloorNumber")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<byte[]>("FloorPlanImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int?>("NumberOfDesks")
                        .HasColumnType("int");

                    b.Property<int?>("NumberOfRooms")
                        .HasColumnType("int");

                    b.HasKey("FloorId");

                    b.HasIndex("BuildingId");

                    b.HasIndex("LocationId");

                    b.ToTable("Floors");
                });

            modelBuilder.Entity("ConferenceRoomAndDeskBookingApplication.Models.Location", b =>
                {
                    b.Property<int>("LocationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LocationId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<byte[]>("LocationImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("PinCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("LocationId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("ConferenceRoomAndDeskBookingApplication.Models.Resource", b =>
                {
                    b.Property<int>("ResourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ResourceId"));

                    b.Property<int>("BuildingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("FloorId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUnderMaintenance")
                        .HasColumnType("bit");

                    b.Property<int>("LocationId")
                        .HasColumnType("int");

                    b.Property<int?>("MaxBookingDuration")
                        .HasColumnType("int");

                    b.Property<int?>("MinBookingDuration")
                        .HasColumnType("int");

                    b.Property<int>("ResourceType")
                        .HasColumnType("int");

                    b.HasKey("ResourceId");

                    b.HasIndex("BuildingId");

                    b.HasIndex("FloorId");

                    b.HasIndex("LocationId");

                    b.ToTable("Resources");
                });

            modelBuilder.Entity("ConferenceRoomAndDeskBookingApplication.Models.Room", b =>
                {
                    b.Property<int>("RoomId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoomId"));

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<bool>("DigitalProjector")
                        .HasColumnType("bit");

                    b.Property<bool>("HasAirConditioning")
                        .HasColumnType("bit");

                    b.Property<string>("PhoneExtension")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("ResourceId")
                        .HasColumnType("int");

                    b.Property<byte[]>("RoomImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("RoomName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("TV")
                        .HasColumnType("bit");

                    b.Property<bool>("VideoConferenceEquipment")
                        .HasColumnType("bit");

                    b.Property<bool>("Whiteboard")
                        .HasColumnType("bit");

                    b.Property<bool>("Wifi")
                        .HasColumnType("bit");

                    b.HasKey("RoomId");

                    b.HasIndex("ResourceId")
                        .IsUnique();

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("ConferenceRoomAndDeskBookingApplication.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<byte[]>("ProfileImage")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.HasIndex("LocationId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("ConferenceRoomAndDeskBookingApplication.Models.UserBookingStats", b =>
                {
                    b.Property<int>("StatsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StatsId"));

                    b.Property<int>("CancelledBookings")
                        .HasColumnType("int");

                    b.Property<int>("CompletedBookings")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastNoShowDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("NoShows")
                        .HasColumnType("int");

                    b.Property<int>("TotalBookings")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("StatsId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserBookingStats");
                });

            modelBuilder.Entity("ConferenceRoomAndDeskBookingApplication.Models.UserNotification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<int?>("BookingId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<string>("NotificationSubject")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("NotificationType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("NotificationId");

                    b.HasIndex("BookingId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("EventId");

                    b.HasIndex("LocationId");

                    b.HasIndex("Status");

                    b.HasIndex("UserId");

                    b.ToTable("UserNotifications");
                });

            modelBuilder.Entity("ConferenceRoomAndDeskBookingApplication.Models.Booking", b =>
                {
                    b.HasOne("ConferenceRoomAndDeskBookingApplication.Models.Resource", "Resource")
                        .WithMany("Bookings")
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("ConferenceRoomAndDeskBookingApplication.Models.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Resource");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ConferenceRoomAndDeskBookingApplication.Models.BookingCheckIn", b =>
                {
                    b.HasOne("ConferenceRoomAndDeskBookingApplication.Models.Booking", "Booking")
                        .WithOne("CheckIn")
                        .HasForeignKey("ConferenceRoomAndDeskBookingApplication.Models.BookingCheckIn", "BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");
                });

            modelBuilder.Entity("ConferenceRoomAndDeskBookingApplication.Models.BroadcastNotification", b =>
                {
                    b.HasOne("ConferenceRoomAndDeskBookingApplication.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConferenceRoomAndDeskBookingApplication.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Department");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("ConferenceRoomAndDeskBookingApplication.Models.Building", b =>
                {
                    b.HasOne("ConferenceRoomAndDeskBookingApplication.Models.Location", "Location")
                        .WithMany("Buildings")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("ConferenceRoomAndDeskBookingApplication.Models.Desk", b =>
                {
                    b.HasOne("ConferenceRoomAndDeskBookingApplication.Models.Resource", "Resource")
                        .WithOne("Desk")
                        .HasForeignKey("ConferenceRoomAndDeskBookingApplication.Models.Desk", "ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("ConferenceRoomAndDeskBookingApplication.Models.Event", b =>
                {
                    b.HasOne("ConferenceRoomAndDeskBookingApplication.Models.Building", "Building")
                        .WithMany()
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ConferenceRoomAndDeskBookingApplication.Models.Floor", "Floor")
                        .WithMany()
                        .HasForeignKey("FloorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ConferenceRoomAndDeskBookingApplication.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Building");

                    b.Navigation("Floor");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("ConferenceRoomAndDeskBookingApplication.Models.Floor", b =>
                {
                    b.HasOne("ConferenceRoomAndDeskBookingApplication.Models.Building", "Building")
                        .WithMany("Floors")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConferenceRoomAndDeskBookingApplication.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Building");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("ConferenceRoomAndDeskBookingApplication.Models.Resource", b =>
                {
                    b.HasOne("ConferenceRoomAndDeskBookingApplication.Models.Building", "Building")
                        .WithMany("Resources")
                        .HasForeignKey("BuildingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ConferenceRoomAndDeskBookingApplication.Models.Floor", "Floor")
                        .WithMany("Resources")
                        .HasForeignKey("FloorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ConferenceRoomAndDeskBookingApplication.Models.Location", "Location")
                        .WithMany("Resources")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Building");

                    b.Navigation("Floor");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("ConferenceRoomAndDeskBookingApplication.Models.Room", b =>
                {
                    b.HasOne("ConferenceRoomAndDeskBookingApplication.Models.Resource", "Resource")
                        .WithOne("Room")
                        .HasForeignKey("ConferenceRoomAndDeskBookingApplication.Models.Room", "ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("ConferenceRoomAndDeskBookingApplication.Models.User", b =>
                {
                    b.HasOne("ConferenceRoomAndDeskBookingApplication.Models.Department", "Department")
                        .WithMany("Users")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConferenceRoomAndDeskBookingApplication.Models.Location", "Location")
                        .WithMany("Users")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Department");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("ConferenceRoomAndDeskBookingApplication.Models.UserBookingStats", b =>
                {
                    b.HasOne("ConferenceRoomAndDeskBookingApplication.Models.User", "User")
                        .WithOne("BookingStats")
                        .HasForeignKey("ConferenceRoomAndDeskBookingApplication.Models.UserBookingStats", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("ConferenceRoomAndDeskBookingApplication.Models.UserNotification", b =>
                {
                    b.HasOne("ConferenceRoomAndDeskBookingApplication.Models.Booking", "Booking")
                        .WithMany("Notifications")
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ConferenceRoomAndDeskBookingApplication.Models.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConferenceRoomAndDeskBookingApplication.Models.Event", null)
                        .WithMany("Notifications")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ConferenceRoomAndDeskBookingApplication.Models.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("ConferenceRoomAndDeskBookingApplication.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("Department");

                    b.Navigation("Location");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ConferenceRoomAndDeskBookingApplication.Models.Booking", b =>
                {
                    b.Navigation("CheckIn")
                        .IsRequired();

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("ConferenceRoomAndDeskBookingApplication.Models.Building", b =>
                {
                    b.Navigation("Floors");

                    b.Navigation("Resources");
                });

            modelBuilder.Entity("ConferenceRoomAndDeskBookingApplication.Models.Department", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("ConferenceRoomAndDeskBookingApplication.Models.Event", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("ConferenceRoomAndDeskBookingApplication.Models.Floor", b =>
                {
                    b.Navigation("Resources");
                });

            modelBuilder.Entity("ConferenceRoomAndDeskBookingApplication.Models.Location", b =>
                {
                    b.Navigation("Buildings");

                    b.Navigation("Resources");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("ConferenceRoomAndDeskBookingApplication.Models.Resource", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Desk")
                        .IsRequired();

                    b.Navigation("Room")
                        .IsRequired();
                });

            modelBuilder.Entity("ConferenceRoomAndDeskBookingApplication.Models.User", b =>
                {
                    b.Navigation("BookingStats")
                        .IsRequired();

                    b.Navigation("Bookings");

                    b.Navigation("Notifications");
                });
#pragma warning restore 612, 618
        }
    }
}
